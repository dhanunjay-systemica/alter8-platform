[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "alter8-auth-service"
version = "0.1.0"
description = "Alter8 Authentication Service - JWT-based authentication with multi-role support"
authors = [{name = "Alter8 Residential", email = "dev@alter8residential.com"}]
license = {text = "UNLICENSED"}
# readme = "README.md"
requires-python = ">=3.11"

dependencies = [
    "fastapi>=0.108.0",
    "uvicorn[standard]>=0.25.0",
    "pydantic[email]>=2.5.2",
    "pydantic-settings>=2.1.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "asyncpg>=0.29.0",
    "sqlalchemy>=2.0.25",
    "alembic>=1.13.1",
    "redis>=5.0.1",
    "httpx>=0.26.0",
    "python-dotenv>=1.0.0",
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    "sentry-sdk[fastapi]>=1.39.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.4",
    "pytest-asyncio>=0.23.2",
    "pytest-cov>=4.1.0",
    "factory-boy>=3.3.0",
    "faker>=21.0.0",
    "httpx>=0.26.0",
    "ruff>=0.1.9",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"*/migrations/*" = ["E501"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_defs = true
follow_imports = "silent"
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_unimported = true
no_implicit_optional = true
warn_return_any = true

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "passlib.*",
    "jose.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore:function ham\\(\\) is deprecated:DeprecationWarning",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]